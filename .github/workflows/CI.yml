name: CI

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          components: rustfmt

      - name: cargo fmt --check
        run: cargo fmt --all --check

  test:
    name: Test
    needs: [ style ]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        build: [ stable, beta, nightly ]
        include:
          - build: nightly
            benches: true

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.build }}

      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler

      - name: Build debug
        run: cargo build --all

      - name: Create /var/run/horust directory
        run: sudo mkdir -p /var/run/horust && sudo chmod 777 /var/run/horust

      - name: Test
        run: cargo test

  docker-build-push:
    needs: [ test ]
    strategy:
      matrix:
        platform: ["amd64", "arm64"]
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-22.04' || 'ubuntu-22.04-arm' }}
    permissions:
      packages: write  # push to ghcr.io
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v5
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository_owner }}/horust
            federicoponzi/horust
          flavor: |
            suffix=-${{ matrix.platform }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push images
        uses: docker/build-push-action@v6
        with:
          platforms: linux/${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          provenance: false  # avoid push manifest-list

  # amend the platform tag for docker images
  docker-manifests:
    needs: ["docker-build-push"]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master'
    permissions:
      packages: write  # push to ghcr.io
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get the semver
        id: semver
        env:
          # use 'latest' for master branch, tag for release
          VERSION: ${{ github.ref_type == 'tag' && github.ref_name || 'latest' }}
        run: |
          SEMVER="${VERSION#v}"
          echo "semver=${SEMVER}" >> "$GITHUB_OUTPUT"
      - name: Create manifests
        run: |
          AMD_TAG=${{ steps.semver.outputs.semver }}-amd64
          ARM_TAG=${{ steps.semver.outputs.semver }}-arm64
          SEMVER=${{ steps.semver.outputs.semver }}
          docker manifest create \
            ghcr.io/${{ github.repository_owner }}/horust:${SEMVER} \
            --amend ghcr.io/${{ github.repository_owner }}/horust:${AMD_TAG} \
            --amend ghcr.io/${{ github.repository_owner }}/horust:${ARM_TAG}
          docker manifest push ghcr.io/${{ github.repository_owner }}/horust:${SEMVER}
          docker manifest create \
            federicoponzi/horust:${SEMVER} \
            --amend federicoponzi/horust:${AMD_TAG} \
            --amend federicoponzi/horust:${ARM_TAG}
          docker manifest push federicoponzi/horust:${SEMVER}

  ## This will create a new release in github/releases page. It will run only for tags with semver format.
  create-release:
    name: deploy
    needs: [ test ]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-22.04  # glibc 2.35
    strategy:
      matrix:
        target:
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - i686-unknown-linux-gnu
          - i686-unknown-linux-musl
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Install rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Install protoc
        run: sudo apt-get install -y protobuf-compiler

      - name: Install cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build target
        # TODO:   There should be a step to build horustctl.
        run: cross build --release --package horust --bin horust --target ${{ matrix.target }}

      - name: Package
        shell: bash
        run: |
          #strip target/${{ matrix.target }}/release/horust
          cd target/${{ matrix.target }}/release
          tar czvf ../../../horust-${{ matrix.target }}.tar.gz horust
          cd -

      - name: Publish
        uses: softprops/action-gh-release@v2
        # TODO: if any of the build step fails, the release should be deleted.
        with:
          files: 'horust*'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
